pipeline {
    parameters {
        string(name: 'SERVER_NAME', description: 'Nombre del servidor')
        string(name: 'PARTNER_NAME', description: 'Nombre del cliente')
        string(name: 'VERSION', description: 'Versión en formato XX.X')
        booleanParam(name: 'CREAR_TEST', defaultValue: false, description: 'Crear carpetas de pruebas')
        booleanParam(name: 'CREAR_PROD', defaultValue: false, description: 'Crear carpetas de producción')
        string(name: 'PYTHON_VERSION', description: 'Versión de Python')
        string(name: 'ODOO_PATH', description: 'Path de Odoo del servidor')
        string(name: 'HTTP_PORT', description: 'Puerto HTTP de Odoo de producción (Pruebas será 100 más)')
    }

    environment {
        mayorVersion = "${VERSION.split('\\.')[0]}"
        cleanPartnerName = "${PARTNER_NAME.strip().replaceAll(' ', '_').replace(mayorVersion, '')}"
        lowerPartnerName = "${cleanPartnerName.toLowerCase()}"
        upperPartnerName = "${cleanPartnerName.toUpperCase()}"
    }

    agent {
        label params.SERVER_NAME
    }


    stages {
        stage("Inicar valores") {
            steps {
                script {
                    def enviroments = []
                    if(CREAR_TEST){
                        enviroments.add([
                            environmentFolder: "${HOME}/${upperPartnerName}/odoo_${mayorVersion}_pruebas_${lowerPartnerName}",
                            enviromentName: "${lowerPartnerName}_pruebas",
                            dbUser: "${lowerPartnerName}_pruebas",
                            dbPass: "${lowerPartnerName}_v${mayorVersion}",
                            http_port: "${HTTP_PORT.toInteger() + 100}",
                            gevent_port: "${HTTP_PORT.toInteger() + 100 + 3}"
                        ])
                    }

                    if(CREAR_PROD){
                        enviroments.add([
                            environmentFolder: "${HOME}/${upperPartnerName}/odoo_${mayorVersion}_${lowerPartnerName}",
                            enviromentName: "${lowerPartnerName}",
                            dbUser: "${lowerPartnerName}",
                            dbPass: "${lowerPartnerName}_v${mayorVersion}",
                            http_port: "${HTTP_PORT.toInteger()}",
                            gevent_port: "${HTTP_PORT.toInteger() + 3}"
                        ])
                    }

                    writeFile file: 'enviroments.json', text: groovy.json.JsonOutput.toJson(enviroments)
                }
            }
        }

        stage("Crear directorios") {
            steps {
                script {
                    def enviroments = getEnviromentsInfo()
                    enviroments.each {env -> 
                        createFolders(env.environmentFolder)
                    }
                }
            }
        }

        stage('Clonar Odoo') {
            steps {
                script {
                    def enviroments = getEnviromentsInfo()
                    enviroments.each {env -> 
                        cloneLinkOdoo(env.environmentFolder)
                    }
                }
            }
        }

        stage('Verificar instalación pyenv') {
            steps {
                script {
                    try {
                        sh "${HOME}/.pyenv/bin/pyenv --version"
                    } catch(Exception e) {
                        echo 'pyenv no está instalado. Instalando...'
                        sh "curl https://pyenv.run | bash"
                    }
                }
            }
        }

        stage('Crear entornos virtuales') {
            steps {
                script {
                    if (!checkPythonVersion()){
                        sh "${HOME}/.pyenv/bin/pyenv install ${PYTHON_VERSION}"
                    }

                    def enviroments = getEnviromentsInfo()
                    enviroments.each { env -> 
                        createEnviromentIfNotExists(env.enviromentName, env.environmentFolder)
                    }
                }
            }
        }

        stage("Instalar requerimientos") {
            steps {
                script {
                    def enviroments = getEnviromentsInfo()
                    enviroments.each { env -> 
                        installRequirements(env.environmentFolder)
                    }
                }
            }
        }

        stage("Crear usuario de base de datos") {
            steps {
                script {
                    def enviroments = getEnviromentsInfo()
                    enviroments.each { env -> 
                        createDbUser(env.dbUser, env.dbPass)
                    }
                }
            }
        }

        stage("Generate config file") {
            steps {
                script {
                    def enviroments = getEnviromentsInfo()
                    enviroments.each { env -> 
                        createConfigFile(env.environmentFolder)
                        changeConfigParams(env)
                    }
                }
            }
        }

        stage("Create services"){
            steps {
                script {
                    def enviroments = getEnviromentsInfo()
                    enviroments.each { env -> 
                        createServiceFile(env)
                    }
                }
            }
        }
    }
}

def createServiceFile(env) {
    def servicePath = "${HOME}/${upperPartnerName}"
    def name = "${env.enviromentName}"
    def serviceName = "odoo-${env.enviromentName}"
    def templateContents = readFile 'odoo/odoo.service.template'
    def serviceContents = templateContents.replaceAll('\\$\\{name\\}', name)
                                          .replaceAll('\\$\\{version\\}', mayorVersion)
                                          .replaceAll('\\$\\{user\\}', USER)
                                          .replaceAll('\\$\\{command\\}', "${env.environmentFolder}/.venv/bin/python3 ${env.environmentFolder}/server/odoo-bin -c ${env.environmentFolder}/config/odoo-server.conf")
    
    def tempServiceFile = File.createTempFile("${serviceName}", '.service')
    writeFile  file: "${tempServiceFile}", text: "${serviceContents}"
    sh "sudo cp ${tempServiceFile} ${servicePath}/${serviceName}.service"
    sh "sudo chmod 644  ${servicePath}/${serviceName}.service"
    sh "sudo chown ${USER}:${USER}  ${servicePath}/${serviceName}.service"

    sh "sudo ln -sf ${servicePath}/${serviceName}.service /etc/systemd/system/${serviceName}.service"
    sh "sudo systemctl daemon-reload"
    sh "sudo systemctl enable ${serviceName}"
    sh "sudo systemctl start ${serviceName}"

}

def createDbUser(String user, String pass){
    def userExists = sh(returnStdout: true, script: "sudo -u postgres psql -tAc \"SELECT COALESCE(COUNT(*), 0) FROM pg_roles WHERE rolname='${user}'\"").trim()
    if(userExists.toInteger() == 0){
        sh "sudo -u postgres psql -c \"CREATE USER ${user} WITH PASSWORD '${pass}' NOCREATEROLE;\""
    } else {
        echo "El usuario '${user}' ya existe. No se creará nuevamente."
    }
}

def createConfigFile(String enviromentPath){
    sh "${enviromentPath}/.venv/bin/python3 ${enviromentPath}/server/odoo-bin -s -c ${enviromentPath}/config/odoo-server.conf --stop-after-init"
    sh "sudo chmod 660 ${enviromentPath}/config/odoo-server.conf"
    sh "sudo chown ${USER}:${USER} ${enviromentPath}/config/odoo-server.conf"
}

def changeConfigParams(env){
    def addonsPath = sh(returnStdout: true, script: "python3 odoo/get-addons-path.py ${env.environmentFolder}")
    def config = [
        addons_path: "${addonsPath.replace('\n', '')}",
        http_port: "${env.http_port}",
        gevent_port: "${env.gevent_port}",
        db_host: "127.0.0.1",
        db_port: "5432",
        db_user: "${env.dbUser}",
        db_password: "${env.dbPass}",
        data_dir: "${env.environmentFolder}/.local",
        db_filter: "./*",
        proxy_mode: "True",
    ]

    def command = "python3 odoo/config.py ${env.environmentFolder}/config/odoo-server.conf"
    config.each { key, value ->
        command += " ${key}=${value}"
    }

    sh command
}

def getEnviromentsInfo(){
    def enviroments = readJSON file: 'enviroments.json'
    return enviroments
}

def installRequirements(String enviromentPath){
    sh "${enviromentPath}/.venv/bin/pip3 install --upgrade pip"
    sh "${enviromentPath}/.venv/bin/pip3 install wheel"
    sh "${enviromentPath}/.venv/bin/pip3 install -r ${enviromentPath}/requirements/requirements.txt"
}

def cloneLinkOdoo(String enviromentPath){
    if (ODOO_PATH) {
        sh "ln -fs ${ODOO_PATH} ${enviromentPath}/server"
    }else {
        sh "git clone --branch ${VERSION} --depth 1 https://github.com/odoo/odoo ${enviromentPath}/server"
    }

    sh "ln -fs ${enviromentPath}/server/requirements.txt ${enviromentPath}/requirements/"
}

def checkPythonVersion() {
    try {
        def versionExists = sh(returnStdout: true, script: "${HOME}/.pyenv/bin/pyenv versions | grep ${PYTHON_VERSION}")
        return true
    }catch(Exception e){
        return false
    }
}

def createEnviromentIfNotExists(String name, String folder) {
    try {
        def enviromentExists = sh(returnStdout: true, script:"${HOME}/.pyenv/bin/pyenv virtualenvs | grep -w ${name}")   
    }catch(Exception e){
        sh "${HOME}/.pyenv/bin/pyenv virtualenv ${PYTHON_VERSION} ${name}"
    }

    sh "ln -sf ${HOME}/.pyenv/versions/${name} ${folder}/.venv"
}

def createFolders(String enviromentFolder) {
    def odooFolders = ['addons/addons_development', 'addons/oca', 'addons/third_party_addons', 'config', 'requirements', 'logs']
    String folderName = ''
    odooFolders.each { folder -> 
        folderName = "${enviromentFolder}/${folder}"
        sh "sudo -u ${USER} mkdir -p ${folderName}"
    }
}
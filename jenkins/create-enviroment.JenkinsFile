pipeline {
    parameters {
        string(name: 'SERVER_NAME', description: 'Nombre del servidor')
        string(name: 'PARTNER_NAME', description: 'Nombre del cliente')
        string(name: 'VERSION', description: 'Versión en formato XX.X')
        booleanParam(name: 'CREAR_TEST', defaultValue: false, description: 'Crear carpetas de pruebas')
        booleanParam(name: 'CREAR_PROD', defaultValue: false, description: 'Crear carpetas de producción')
        string(name: 'PYTHON_VERSION', description: 'Versión de Python')
        string(name: 'ODOO_PATH', description: 'Path de Odoo del servidor')
    }

    environment {
        mayorVersion = "${VERSION.split('\\.')[0]}"
        cleanPartnerName = "${PARTNER_NAME.strip().replaceAll(' ', '_').replace(mayorVersion, '')}"
        lowerPartnerName = "${cleanPartnerName.toLowerCase()}"
        upperPartnerName = "${cleanPartnerName.toUpperCase()}"
    }

    agent {
        label params.SERVER_NAME
    }

    stages {
        stage("Crear directorios") {
            steps {
                script {
                    String environmentFolder = ''

                    if(CREAR_TEST){
                        environmentFolder = "${upperPartnerName}/odoo_${mayorVersion}_pruebas_${lowerPartnerName}"
                        createFolders(environmentFolder)
                    }

                    if(CREAR_PROD){
                        environmentFolder = "${upperPartnerName}/odoo_${mayorVersion}_${lowerPartnerName}"
                        createFolders(environmentFolder)
                    }
                }
            }
        }

        stage('Clonar Odoo') {
            steps {
                script {
                    def environmentFolder = ''

                    if(CREAR_TEST){
                        environmentFolder = "${upperPartnerName}/odoo_${mayorVersion}_pruebas_${lowerPartnerName}"
                        cloneLinkOdoo(environmentFolder)
                    }

                    if(CREAR_PROD){
                        environmentFolder = "${upperPartnerName}/odoo_${mayorVersion}_${lowerPartnerName}"
                        cloneLinkOdoo(environmentFolder)
                    }
                }
            }
        }

        stage('Verificar instalación pyenv') {
            steps {
                script {
                    try {
                        sh '${HOME}/.pyenv/bin/pyenv --version'
                    } catch(Exception e) {
                        echo 'pyenv no está instalado. Instalando...'
                        sh 'curl https://pyenv.run | bash'
                    }
                }
            }
        }

        stage('Crear entornos virtuales') {
            steps {
                script {
                    if (!checkPythonVersion()){
                        sh "${HOME}/.pyenv/bin/pyenv install ${PYTHON_VERSION}"
                    }

                    def enviromentName = ''
                    def environmentFolder = ''

                    if (CREAR_TEST) {
                        environmentFolder = "${upperPartnerName}/odoo_${mayorVersion}_pruebas_${lowerPartnerName}"
                        enviromentName = "${lowerPartnerName}_pruebas"
                        createEnviromentIfNotExists(enviromentName, environmentFolder)
                    }

                    if (CREAR_PROD) {
                        enviromentName = "${lowerPartnerName}"
                        environmentFolder = "${upperPartnerName}/odoo_${mayorVersion}_${lowerPartnerName}"
                        createEnviromentIfNotExists(enviromentName, environmentFolder)
                    }
                }
            }
        }

        stage("Instalar requerimientos") {
            steps {
                script {
                    def environmentFolder = ''
                    def enviromentName = ''

                    if (CREAR_TEST) {
                        environmentFolder = "${upperPartnerName}/odoo_${mayorVersion}_pruebas_${lowerPartnerName}"
                        enviromentName = "${lowerPartnerName}"
                        installRequirements(enviromentName, environmentFolder)
                    }
                    if (CREAR_PROD) {
                        environmentFolder = "${upperPartnerName}/odoo_${mayorVersion}_${lowerPartnerName}"
                        enviromentName = "${lowerPartnerName}_pruebas"
                        installRequirements(enviromentName, environmentFolder)
                    }
                }
            }
        }
    }
}

def installRequirements(String enviromentName, String enviromentPath){
    sh "${HOME}/.pyenv/bin/pyenv activate ${enviromentName}"
    sh "pip3 install --upgrade pip"
    sh "pip3 install wheel"
    sh "pip3 install -r ${enviromentPath}/requirements/requirements.txt"
    sh "deactivate"
}

def cloneLinkOdoo(String enviromentPath){
    if (ODOO_PATH) {
        sh "ln -fs ${ODOO_PATH} ${enviromentPath}/server"
    }else {
        sh "git clone --branch ${VERSION} --depth 1 https://github.com/odoo/odoo ${enviromentPath}/server"
    }

    sh "ln -fs ${enviromentPath}/server/requirements.txt ${enviromentPath}/requirements/"
}

def checkPythonVersion() {
    try {
        def versionExists = sh(returnStdout: true, script: "${HOME}/.pyenv/bin/pyenv versions | grep ${PYTHON_VERSION}")
        return true
    }catch(Exception e){
        return false
    }
}

def createEnviromentIfNotExists(String name, String folder) {
    try {
        def enviromentExists = sh(returnStdout: true, script:"${HOME}/.pyenv/bin/pyenv virtualenvs | grep ${name}")   
    }catch(Exception e){
        sh "${HOME}/.pyenv/bin/pyenv virtualenv ${PYTHON_VERSION} ${name}"
    }

    sh "ln -sf ${HOME}/.pyenv/versions/${name} ${folder}/.venv"
}

def createFolders(String enviromentFolder) {
    def odooFolders = ['addons/addons_development', 'addons/oca', 'addons/third_party_addons', 'config', 'requirements', 'logs']
    String folderName = ''
    odooFolders.each { folder -> 
        folderName = "${enviromentFolder}/${folder}"
        sh "mkdir -p ${folderName}"
    }
}
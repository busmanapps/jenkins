pipeline {
    
    parameters {
        string(name: 'SERVER_NAME', description: 'Nombre del servidor')
        booleanParam(name: 'IS_TEST', defaultValue: false, description: 'Entorno de pruebas')
        string(name: 'URL', defaultValue: '', description: 'URL Git del repositorio')
        string(name: 'TEST_OCA_PATH', defaultValue: '', description: 'Path de pruebas del los módulos de OCA')
        string(name: 'VERSION', defaultValue: '', description: 'Versión del repositorio')
        string(name: 'PROD_OCA_PATH', defaultValue: '', description: 'Path de producción del los módulos de OCA')
        string(name: 'DESA_NODE', defaultValue: '', description: 'Nombre del nodo del servidor DESA')
        string(name: 'DESA_OCA_PATH', defaultValue: '', description: 'Path de DESA del los módulos de OCA')
        booleanParam(name: 'UPDATE_REPO', defaultValue: false, description: 'Actualizar repositorio')
    }

    agent {
        label params.SERVER_NAME
    }
    
    environment {
        repoName = params.URL.tokenize('/').last().replaceAll('.git', '')
        fromDesa = "${params.DESA_NODE != '' && params.DESA_OCA_PATH != ''}"
        destPath = "${params.IS_TEST ? params.TEST_OCA_PATH : params.PROD_OCA_PATH}"
    }

    stages {

        stage("Cloning / Updating repo") {
            when {
                expression { UPDATE_REPO == true }
            }
            steps {
                script {
                    String sourcePath = "${fromDesa == 'true' ? params.DESA_OCA_PATH : destPath }"
                    def exists = fileExists "${sourcePath}/${repoName}"
                    if(!exists){
                        dir("${sourcePath}"){
                            sh 'git clone --branch ${VERSION} --depth 1 ${URL}'
                        }
                    }else {
                        dir("${sourcePath}/${repoName}"){
                            sh 'git pull'
                        }
                    }
                }
            }

        }

        stage("Copying from DESA"){
            when {
                expression { fromDesa == 'true' }
            }

            agent {
                label params.DESA_NODE
            }

            steps {
                dir("${DESA_OCA_PATH}") {
                    sh "tar -czf ${repoName}.tgz ${repoName}"
                }
                sh "mv ${DESA_OCA_PATH}/${repoName}.tgz ."
                stash name:"${repoName}", includes:"${repoName}.tgz"
            }
        }
        
        stage ("Paste to Node") {
            when {
                expression { fromDesa == 'true' }
            }
            steps {
                unstash "${repoName}"
                sh "mv ${repoName}.tgz ${destPath}"
                dir("${destPath}"){
                    sh "tar -xzf ${repoName}.tgz"
                    sh "rm ${repoName}.tgz"
                    sh "sudo chown ${USER}:${USER} ${repoName}"
                }
            }
        }

        stage ("Crear enlace a pruebas") {
            when {
                expression { IS_TEST == false && TEST_OCA_PATH != '' && PROD_OCA_PATH != '' }
            }

            steps {
                script {
                    def exists = fileExists "${TEST_OCA_PATH}/${repoName}"
                    if(exists){
                        sh 'rm -rf ${TEST_OCA_PATH}/${repoName}'
                    }

                    sh 'ln -s ${PROD_OCA_PATH}/${repoName} ${TEST_OCA_PATH}/'
                }
            }
        }
    }
}